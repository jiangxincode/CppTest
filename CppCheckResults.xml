<?xml version="1.0" encoding="UTF-8" ?>
<results>
    <error file="LinkedSet.h" line="15" id="noCopyConstructor" severity="style" msg="&apos;class LinkedSet&lt;T&gt;&apos; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." />
    <error file="binary_tree.cpp" line="36" id="StlMissingComparison" severity="style" msg="The iterator incrementing is suspicious - it is incremented at line 64 and then at line 36. The loop might unintentionally skip an element in the container. There is no comparison between these increments to prevent that the iterator is incremented beyond the end." />
    <error file="circ_list.h" line="11" id="noCopyConstructor" severity="style" msg="&apos;class CircList&lt;T&gt;&apos; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." />
    <error file="hash.h" line="29" id="uninitMemberVar" severity="style" msg="Member variable &apos;HashEntry::Element&apos; is not initialized in the constructor." />
    <error file="hash.h" line="7" id="noCopyConstructor" severity="style" msg="&apos;class HashTable&apos; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." />
    <error file="heap.h" line="1" id="noCopyConstructor" severity="style" msg="&apos;class heap&apos; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." />
    <error file="linear_list.h" line="72" id="operatorEq" severity="style" msg='The sequence&lt;T&gt;::operator= does not conform to standard C/C++ behaviour. To conform to standard C/C++ behaviour, return a reference to self (such as: &apos;sequence&lt;T&gt; &amp;sequence&lt;T&gt;::operator=(..) { .. return *this; }&apos;. For safety reasons it might be better to not fix this message. If you think that safety is always more important than conformance then please ignore/suppress this message. For more details about this topic, see the book &quot;Effective C++&quot; by Scott Meyers.' />
    <error file="static_list.h" line="12" id="noConstructor" severity="style" msg="The class &apos;StaticList&lt;T&gt;&apos; does not have a constructor although it has private member variables. Member variables of builtin types are left uninitialized when the class is instantiated. That may cause bugs or undefined behavior." />
    <error file="main0524.cpp" line="55" id="StlMissingComparison" severity="style" msg="The iterator incrementing is suspicious - it is incremented at line 64 and then at line 55. The loop might unintentionally skip an element in the container. There is no comparison between these increments to prevent that the iterator is incremented beyond the end." />
    <error file="main0526.cpp" line="21" id="uninitMemberVar" severity="style" msg="Member variable &apos;BinaryTree&lt;char&gt;::RefValue&apos; is not initialized in the constructor." />
    <error file="main0526.cpp" line="13" id="uninitMemberVar" severity="style" msg="Member variable &apos;BinTreeNode&lt;char&gt;::data&apos; is not initialized in the constructor." />
    <error file="main0532.cpp" line="30" id="unusedStructMember" severity="style" msg="struct or union member &apos;topic_info_t::topic_id&apos; is never used." />
    <error file="main1590.cpp" line="56" id="unreadVariable" severity="style" msg="Variable &apos;alpha_1&apos; is assigned a value that is never used." />
    <error file="main1590.cpp" line="57" id="unreadVariable" severity="style" msg="Variable &apos;alpha_2&apos; is assigned a value that is never used." />
    <error file="main1730.cpp" line="117" id="uninitMemberVar" severity="style" msg="Member variable &apos;Queen::q&apos; is not initialized in the constructor." />
    <error file="main1730.cpp" line="323" id="stlIfFind" severity="style" msg="Suspicious condition. The result of find() is an iterator, but it is not properly checked." />
    <error file="main1730.cpp" line="351" id="stlIfFind" severity="style" msg="Suspicious condition. The result of find() is an iterator, but it is not properly checked." />
    <error file="main1740.cpp" line="19" id="clarifyCondition" severity="style" msg="Suspicious condition (assignment + comparison); Clarify expression with parentheses." />
    <error file="main1740.cpp" line="34" id="clarifyCondition" severity="style" msg="Suspicious condition (assignment + comparison); Clarify expression with parentheses." />
    <error file="LinkedSet.h" line="10" id="uninitMemberVar" severity="style" msg="Member variable &apos;SetNode&lt;int&gt;::data&apos; is not initialized in the constructor." />
    <error file="LinkedSet.h" line="15" id="noCopyConstructor" severity="style" msg="&apos;class LinkedSet&lt;int&gt;&apos; does not have a copy constructor which is recommended since the class contains a pointer to allocated memory." />
    <error file="main4240.cpp" line="22" id="unusedVariable" severity="style" msg="Unused variable: output" />
    <error file="main4265.cpp" line="39" id="unreadVariable" severity="style" msg="Variable &apos;minReduce&apos; is assigned a value that is never used." />
    <error file="main4282.cpp" line="65" id="memleak" severity="error" msg="Memory leak: pArray" />
    <error file="main4295.cpp" line="24" id="variableScope" severity="style" msg="The scope of the variable &apos;s&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
    <error file="main4363.cpp" line="63" id="memleak" severity="error" msg="Memory leak: temp" />
    <error file="main4373.cpp" line="45" id="variableScope" severity="style" msg="The scope of the variable &apos;iCnt&apos; can be reduced. Warning: Be careful when fixing this message, especially when there are inner loops. Here is an example where cppcheck will write that the scope for &apos;i&apos; can be reduced:void f(int x){    int i = 0;    if (x) {        // it&apos;s safe to move &apos;int i = 0;&apos; here        for (int n = 0; n &lt; 10; ++n) {            // it is possible but not safe to move &apos;int i = 0;&apos; here            do_something(&amp;i);        }    }}When you see this message it is always safe to reduce the variable scope 1 level." />
</results>
