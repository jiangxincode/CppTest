/**
 * 选择携带的飞船
 * 航母马上要进入光速跳跃通道，需要将所有的防御舰（为了方便理解，下面称为飞船）收回仓库，但在长期的旅行过程中仓库有些已经被流星雨撞坏，为了节约仓库空间，要将1到N号(1~1000)的飞船叠放起来（飞船大小一样，只是重量和可承受重量不一样），规则如下：
 * 1.每个飞船上最多只能 直接叠放 一个飞船；
 * 2.编号较小的飞船不能叠放在编号较大的飞船之上，也就是上面是编号大的，这样才能方便调出编号大的飞船
 * 3.每个飞船上（不包括自身的重量）的所有飞船重量之和不能超过该飞船的可承受重量
 * 现在摆在我们面前的问题就是要编程算出一种叠放飞船数目最多可能是多少。
 *
 * 详细描述
 * int CalcMaxNum(int n, int * pW, int * pM)
 *   输入参数：
 *     n     :  飞船的个数，也就是N（n 在2到900之间为正常情况，包含边界，请在程序中判断异常）
 *     pW    :  从1号到n号的自身重量(编号从1到n, pW[i]表示第i + 1个飞船的重量，pW[i]在1~3000之间，包含边界，约定函数调用者只会是1~3000)
 *     pM    :  从1号到n号的可承受重量(编号从1到n, pM[i]表示第i + 1个飞船的可承受重量，pM[i]在1~3000之间，包含边界，约定函数调用者只会是1~3000)
 *   返回值  :
 *     int:  一次最多可叠放的飞船总数。参数错误返回0
 */
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include <iostream>

#define MAXNUM 1000
#define MAXWIGHT 3000

/*
详细描述如下：
int CalcMaxNum(int n, int * pW, int * pM)
  输入参数：
    n     :  飞船的个数，也就是N（1<=N<=900）
    pW    :  从1号到n号的自身重量(1<=Wn<=3000，外面传进来知只会是1~3000)
    pM    :  从1号到n号的可承受重要(1<=Mn<=3000，外面传进来知只会是1~3000）
  返回值  :
    unsigned int:  一次最多可叠放的飞船总数。参数错误返回0
*/

int CalcMaxNum(int n, int * pW, int * pM)
{
    return 0;
}

int main()
{
    int ws[] = {
            19, 7, 5, 6, 1};
    int ms[] = {
            15, 13, 7, 8, 2};
    int ret = CalcMaxNum(5,
                         ws,
                         ms);
    std::cout << (ret == 4) << std::endl;
}
