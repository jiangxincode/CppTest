/**
 * 开心的小明
 * 小明今天很开心，家里购置的新房就要领钥匙了，新房里有一间他自己专用的很宽敞的房间。更让他高兴的是，妈妈昨天对他说：“你的房间需要购买哪些物品，怎么布置，你说了算，只要不超过N元钱就行”。今天一早小明就开始做预算，但是他想买的东西太多了，肯定会超过妈妈限定的N元。
 * 于是，他把每件物品规定了一个重要度，分为5等：用整数1~5表示，第5等最重要。他还从因特网上查到了每件物品的价格（都是整数元）。他希望在不超过N元（可以等于N元）的前提下，使每件物品的价格与重要度的乘积的总和最大。
 * 设第j件物品的价格为v[j]，重要度为w[j]，共选中了k件物品，编号依次为j1，j2，……，jk，则所求的总和为：
 * v[j1]*w[j1]+v[j2]*w[j2]+ …+v[jk]*w[jk]。（其中*为乘号）
 * 请你帮助小明设计一个满足要求的购物单。
 * 函数：void GetResult(int*p,int& Get_Result)
 *
 * 输入参数：int*p 指向二维数组的首地址，该二维数组第0行的两个数分别表示：总钱数(<30000)和希望购买物品的个数(<25);该数组从第1行到第m行(1<=j<=m)中给出了编号为j的物品的基本数据，每行有2个非负整数，表示该物品的价格(<=10000)和该物品的重要度(1~5)。
 *  Get_Result表示不超过总钱数的物品的价格与重要度乘积的总和的最大值(<100000000)。
 * 输出：无
 *
 */
#include "iostream"



/*
功能:

输入参数：int*p 指向二维数组的首地址，该二维数组第0行的两个数分别表示：总钱数<30000，和希望购买物品的个数<25;
          该数组从第1行到第m行(1<=j<=m)中给出了编号为j的物品的基本数据，每行有2个非负整数，
		  表示该物品的价格(<=10000)和该物品的重要度(1~5)。

		  GetResult表示不超过总钱数的物品的价格与重要度乘积的总和的最大值(<100000000)。

		  不需做入参检查，测试用例可以保证～

    例如：4000 8（第0行）
		  821 3  （第1行）
		  422 5
		  458 5
		  500 3
		  200 2
		  430 4
		  530 3
		  239 3

		  则表示 总钱数为4000，希望购买物品个数为8个，因此从第1行到第8行表示编号为j的物品的价格及物品的重要度。




返回值：无

温馨提示：根据题意可知，该二维数组只有两列，且行数为第0行的第二个元素数值+1;入参p不能按照二维数组的方法来取值，要将
          二维的转换成一维的哦～

*/

void GetResult(int*p,int& Get_Result)
{
    //	在这里实现功能
    if(!p)
    {
        return;
    }
    int dp[30000]={0}; //每种金额下每件物品的价格与重要度的乘积的总和
    for(int i=1;i<=p[0+1];++i)
    {
        for(int j=p[0+0];j>=p[i*2+0];--j)
        {
            if(dp[j] < dp[j-p[i*2+0]]+p[i*2+0]*p[i*2+1])
            {
                dp[j] = dp[j-p[i*2+0]]+p[i*2+0]*p[i*2+1];
            }
        }
    }

    Get_Result=dp[p[0+0]];
}

int main() {
    {
        int a[6][2] = {{1000,5},{800,2},{400,5},{300,5},{400,3},{200,2}} ;
        int *p = &a[0][0];
        int GetNumber = 0;
        GetResult(p,GetNumber);
        std::cout << (3900 == GetNumber) << std::endl;
    }
    {
        int a[16][2] = {{4000,15},{821,3},{422,5},{458,5},{500,3},{200,2},{430,4},{530,3},{239,3},{630,4},{500,2},{220,3},{430,3},{400,5},{400,5},{500,3}};
        int *p = &a[0][0];
        int GetNumber = 0;
        GetResult(p,GetNumber);
        std::cout << (16393 == GetNumber) << std::endl;
    }
}


